name: CI/CD — ${{ github.event_name }}:${{ github.ref_name }} — ${{ github.actor }}#${{ github.run_number }}

on:
  push:
    branches: [ main, develop ]
    tags: [ 'v*.*.*' ]
  pull_request:
    branches: [ main, develop ]
  workflow_dispatch:

env:
  REGISTRY: ghcr.io
  IMAGE_NAME: ${{ github.repository }}

jobs:
  # Always run: Test, lint, and build Python package
  test-and-build:
    runs-on: ubuntu-latest
    strategy:
      matrix:
        # Keep CI testing restricted to Python 3.11 (used by the Docker image).
        # Previously we tested multiple Python versions; to speed up CI and
        # match the container runtime we only run 3.11 here. If you need to
        # re-enable other versions temporarily, uncomment the line below.
        # python-version: ["3.10", "3.11", "3.12"]
        python-version: ["3.11"]
    outputs:
      is-release: ${{ startsWith(github.ref, 'refs/tags/v') }}

    steps:
    - name: Check out code
      uses: actions/checkout@v4
      with:
        fetch-depth: 0  # Needed for proper git history

    - name: Set up Python ${{ matrix.python-version }}
      uses: actions/setup-python@v5
      with:
        python-version: ${{ matrix.python-version }}

    - name: Set up pip cache
      uses: actions/cache@v4
      with:
        path: ~/.cache/pip
        key: ${{ runner.os }}-pip-${{ hashFiles('**/pyproject.toml') }}
        restore-keys: |
          ${{ runner.os }}-pip-

    - name: Install Hatch
      run: pip install --upgrade hatch

    - name: Run linting and formatting checks
      run: |
        hatch run lint

    # Note: mypy is temporarily disabled in pyproject.toml lint script
    # due to extensive type annotation needs that require fixing

    - name: Test with pytest
      run: |
        hatch run test-cov

    - name: Upload coverage to Codecov
      if: matrix.python-version == '3.11'  # Only upload once
      uses: codecov/codecov-action@v3
      with:
        file: ./coverage.xml
        flags: unittests
        name: codecov-umbrella
        fail_ci_if_error: false

    # Only build package artifacts once (Python 3.11)
    - name: Build package
      if: matrix.python-version == '3.11'
      run: hatch build

    - name: Check package metadata
      if: matrix.python-version == '3.11'
      run: |
        pip install twine
        twine check dist/*

    - name: Upload build artifacts
      if: matrix.python-version == '3.11'
      uses: actions/upload-artifact@v4
      with:
        name: dist
        path: dist/
        retention-days: 7

    - name: Build wheelhouse (platform wheels for heavy deps)
      if: matrix.python-version == '3.11'
      run: |
        set -euo pipefail
        mkdir -p wheels
        python -m pip install --upgrade pip
        # Download binary wheels for heavy native deps so Docker builds can use them
        # Use PyTorch CPU index to fetch CPU wheels by default
        PIP_NO_CACHE_DIR=0 pip download --dest wheels --only-binary=:all: \
          marker-pdf "mineru[pipeline]" docling pymupdf4llm opencv-python-headless \
          torch torchvision torchaudio --extra-index-url https://download.pytorch.org/whl/cpu || true

    - name: Upload wheelhouse
      if: matrix.python-version == '3.11'
      uses: actions/upload-artifact@v4
      with:
        name: wheelhouse
        path: wheels/
        retention-days: 7

  # Always run: Build Docker image (push only on tags)
  docker-build:
    runs-on: ubuntu-latest
    needs: test-and-build
    strategy:
      matrix:
        # Build a single combined image that includes both marker and mineru
        pdf-parser: [all]
    permissions:
      contents: read
      packages: write
      id-token: write  # For artifact attestation

    steps:
    - name: Check out code
      uses: actions/checkout@v4
      with:
        fetch-depth: 0  # Needed for proper git history

    - name: Download wheelhouse
      uses: actions/download-artifact@v4
      with:
        name: wheelhouse
        path: wheels/

    - name: Set up Docker Buildx
      uses: docker/setup-buildx-action@v3

    - name: Log in to GitHub Container Registry
      if: startsWith(github.ref, 'refs/tags/v') || (github.event_name == 'push' && github.ref == 'refs/heads/main')
      uses: docker/login-action@v3
      with:
        registry: ${{ env.REGISTRY }}
        username: ${{ github.actor }}
        password: ${{ secrets.GITHUB_TOKEN }}

    - name: Extract Docker metadata
      id: meta
      uses: docker/metadata-action@v5
      with:
        images: ${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}
        tags: |
          # Latest tag for main branch pushes (not tags)
          type=raw,value=latest,enable={{is_default_branch}}
          # (No parser-specific tag) We build a single 'all' image and push only 'latest' for main
          # Branch-based tags for development
          type=ref,event=branch,enable=${{ !startsWith(github.ref, 'refs/tags/v') }}
          # PR-based tags
          type=ref,event=pr
          # Version tags (only for releases)
          type=ref,event=tag
          type=semver,pattern={{version}}
          type=semver,pattern={{major}}.{{minor}}
          type=semver,pattern={{major}},enable=${{ !startsWith(github.ref, 'refs/tags/v0.') }}
        labels: |
          org.opencontainers.image.title=pdfkb-mcp
          org.opencontainers.image.description=PDF Knowledgebase MCP Server - Document search with vector embeddings
          org.opencontainers.image.source=https://github.com/tekgnosis-net/pdfkb-mcp
          org.opencontainers.image.licenses=MIT
          org.opencontainers.image.authors=Juan Villa <juanqui@villafam.com>

    - name: Build and conditionally push Docker image
      id: build
      uses: docker/build-push-action@v5
      with:
        context: .
        # Build on amd64 only. The CUDA PyTorch base image used in the Dockerfile
        # requires x86_64; attempting to run apt/build steps for arm64 under QEMU
        # in the Actions runner caused "Invalid ELF image for this architecture".
        # If you later need arm64 artifacts, consider a separate cross-build pipeline
        # with an arm64-compatible base image or pre-built multi-arch binaries.
        platforms: linux/amd64
        # Push only on: 1) version tags, 2) main branch pushes
        push: ${{ startsWith(github.ref, 'refs/tags/v') || (github.event_name == 'push' && github.ref == 'refs/heads/main') }}
        tags: ${{ steps.meta.outputs.tags }}
        labels: ${{ steps.meta.outputs.labels }}
        build-args: |
          PDFKB_VERSION=${{ github.ref_name }}
          BUILD_DATE=${{ steps.meta.outputs.created }}
          VCS_REF=${{ github.sha }}
          PDF_PARSER=all
        cache-from: type=gha
        cache-to: type=gha,mode=max

  # Lightweight Docker smoke build for PRs and pushes. This avoids baking heavy
  # per-parser venvs by toggling the SKIP_PARSER_VENVS build-arg. It runs on
  # branches and PRs to ensure Dockerfile remains buildable without heavy
  # downloads.
  docker-smoke:
    runs-on: ubuntu-latest
    permissions:
      contents: read
      packages: write
    needs: test-and-build
    if: github.event_name == 'pull_request' || (github.event_name == 'push' && github.ref != 'refs/tags/*')
    steps:
      - name: Check out code
        uses: actions/checkout@v4

      - name: Download built package artifact
        uses: actions/download-artifact@v4
        with:
          name: dist
          path: dist/

      - name: Set up Python 3.11
        uses: actions/setup-python@v5
        with:
          python-version: '3.11'

      - name: Install built package and run import smoke
        run: |
          set -euo pipefail
          python -m pip install --upgrade pip
          # Install any built wheel or sdist from the dist artifact
          if ls dist/*.whl 1> /dev/null 2>&1; then
            pip install dist/*.whl
          else
            pip install dist/*
          fi
          python -c "import pdfkb; print('OK')"


  # Stricter Dockerfile validation for PRs/pushes: build a temporary image that
  # bakes the 'marker' parser venv, run a container smoke import, then delete
  # the pushed temporary package version from GHCR to avoid leaving cruft.
  docker-validate:
    runs-on: ubuntu-latest
    needs: test-and-build
    if: github.event_name == 'pull_request' || (github.event_name == 'push' && github.ref != 'refs/tags/*')
    permissions:
      contents: read
      packages: write
    steps:
      - name: Check out code
        uses: actions/checkout@v4

      - name: Download wheelhouse
        uses: actions/download-artifact@v4
        with:
          name: wheelhouse
          path: wheels/

      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v3

      - name: Log in to GHCR
        uses: docker/login-action@v3
        with:
          registry: ${{ env.REGISTRY }}
          username: ${{ github.actor }}
          password: ${{ secrets.GITHUB_TOKEN }}

      - name: Build and push temporary validation image (marker)
        uses: docker/build-push-action@v5
        with:
          context: .
          platforms: linux/amd64
          push: true
          tags: ${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}:pr-${{ github.run_id }}
          build-args: |
            PDFKB_VERSION=${{ github.ref_name }}
            VCS_REF=${{ github.sha }}
            PDF_PARSER=marker
            SKIP_PARSER_VENVS=false
          cache-from: type=gha
          cache-to: type=gha,mode=max

      - name: Run container smoke test against pushed image
        run: |
          set -euo pipefail
          IMAGE=${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}:pr-${{ github.run_id }}
          echo "Running smoke test from $IMAGE"
          # Pull then run to ensure image is usable from registry
          docker pull "$IMAGE"
          docker run --rm --name pdfkb-validate "$IMAGE" python -c "import pdfkb; print('OK')"

      - name: Install jq (for parsing GHCR API JSON)
        run: |
          sudo apt-get update && sudo apt-get install -y jq

      - name: Delete temporary GHCR package version (cleanup)
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        run: |
          set -euo pipefail
          PACKAGE_NAME=pdfkb-mcp
          OWNER=tekgnosis-net
          TAG=pr-${{ github.run_id }}
          echo "Looking up package versions for $PACKAGE_NAME with tag $TAG"
          # List container package versions and find the matching id by tag
          VERSION_ID=$(gh api --method GET "/orgs/${OWNER}/packages/container/${PACKAGE_NAME}/versions" -q ".[] | select(.metadata.tags[]? == \"${TAG}\") | .id") || true
          if [ -n "$VERSION_ID" ]; then
            echo "Deleting package version $VERSION_ID"
            gh api --method DELETE "/orgs/${OWNER}/packages/container/${PACKAGE_NAME}/versions/${VERSION_ID}"
          else
            echo "No matching package version found for tag $TAG; nothing to delete"
          fi

    

  parser-publish-smoke:
    runs-on: ubuntu-latest
    needs: docker-build
    if: startsWith(github.ref, 'refs/tags/v') || (github.event_name == 'push' && github.ref == 'refs/heads/main')
    steps:
      - name: Check out repository (to access scripts)
        uses: actions/checkout@v4
        with:
          fetch-depth: 0

      - name: Pull published image
        run: |
          set -euo pipefail
          IMAGE=${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}:latest
          echo "Pulling image $IMAGE"
          docker pull "$IMAGE" || true

      - name: Run parser verification container
        run: |
          set -euo pipefail
          IMAGE=${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}:latest
          CONTAINER_NAME=pdfkb-publish-smoke
          # Start the image in a disposable container for checks
          docker run -d --name ${CONTAINER_NAME} --rm "$IMAGE" sleep infinity
          # Give the container a few seconds to initialize
          sleep 5

      - name: Run parser import smoke script
        run: |
          set -euo pipefail
          ./scripts/ci-parser-check.sh pdfkb-publish-smoke

      - name: Stop smoke container (cleanup)
        if: always()
        run: |
          docker stop pdfkb-publish-smoke || true

      

  # Only on version tags: Publish to PyPI and create GitHub release
  publish:
    if: startsWith(github.ref, 'refs/tags/v')
    runs-on: ubuntu-latest
    needs: [test-and-build, docker-build]
    permissions:
      contents: write
      id-token: write  # For PyPI trusted publishing

    steps:
    - name: Check out code
      uses: actions/checkout@v4
      with:
        fetch-depth: 0

    - name: Download build artifacts
      uses: actions/download-artifact@v4
      with:
        name: dist
        path: dist/

    - name: Create GitHub Release
      uses: softprops/action-gh-release@v1
      with:
        files: dist/*
        generate_release_notes: true
        draft: false
        prerelease: false
      env:
        GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}

    - name: Publish to PyPI
      uses: pypa/gh-action-pypi-publish@release/v1
      with:
        password: ${{ secrets.PYPI_API_TOKEN }}

    - name: Output release details
      run: |
        echo "🎉 Release ${{ github.ref_name }} published successfully!"
        echo "📦 PyPI: https://pypi.org/project/pdfkb-mcp/${{ github.ref_name }}/"
        echo "🐳 Docker: ${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}:${{ github.ref_name }}"
        echo "📋 GitHub: https://github.com/${{ github.repository }}/releases/tag/${{ github.ref_name }}"
