name: "Nightly Image Build — run#${{ github.run_number }} — ${{ github.actor }}"

# Builds and pushes the heavy, parser-baked Docker image on a nightly schedule
# and on manual dispatch. This keeps the regular CI (pushes/PRs) fast and avoids
# exhausting ephemeral GitHub Actions runner disk when downloading very large
# native wheels.

on:
  schedule:
    # Daily at 02:00 UTC — adjust if you want a different window
    - cron: '0 2 * * *'
  workflow_dispatch: {}

concurrency:
  group: image-nightly
  cancel-in-progress: false

env:
  REGISTRY: ghcr.io
  IMAGE_NAME: ${{ github.repository }}

jobs:
  build-and-push:
    runs-on: ubuntu-latest
    permissions:
      contents: read
      packages: write
      id-token: write

    steps:
    - name: Check out code
      uses: actions/checkout@v4
      with:
        fetch-depth: 0

    - name: Set up Python 3.11
      uses: actions/setup-python@v5
      with:
        python-version: '3.11'

    - name: Set up pip cache
      uses: actions/cache@v4
      with:
        path: ~/.cache/pip
        key: ${{ runner.os }}-pip-nightly-${{ hashFiles('**/pyproject.toml') }}
        restore-keys: |
          ${{ runner.os }}-pip-

    - name: Build wheelhouse for nightly
      run: |
        set -euo pipefail
        mkdir -p wheels
        python -m pip install --upgrade pip
        PIP_NO_CACHE_DIR=0 pip download --dest wheels --only-binary=:all: \
          marker-pdf "mineru[pipeline]" docling pymupdf4llm opencv-python-headless \
          torch torchvision torchaudio --extra-index-url https://download.pytorch.org/whl/cpu || true

    - name: Upload nightly wheelhouse artifact
      uses: actions/upload-artifact@v4
      with:
        name: wheelhouse-nightly
        path: wheels/
        retention-days: 7

    - name: Set up Docker Buildx
      uses: docker/setup-buildx-action@v3

    - name: Log in to GitHub Container Registry
      uses: docker/login-action@v3
      with:
        registry: ${{ env.REGISTRY }}
        username: ${{ github.actor }}
        password: ${{ secrets.GITHUB_TOKEN }}

    - name: Extract Docker metadata
      id: meta
      uses: docker/metadata-action@v5
      with:
        images: ${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}
        tags: |
          type=raw,value=latest,enable={{is_default_branch}}
          type=semver,pattern={{version}}
          type=semver,pattern={{major}}.{{minor}}
          type=ref,event=branch,enable=${{ !startsWith(github.ref, 'refs/tags/v') }}
        labels: |
          org.opencontainers.image.title=pdfkb-mcp
          org.opencontainers.image.description=PDF Knowledgebase MCP Server - Document search with vector embeddings
          org.opencontainers.image.source=https://github.com/tekgnosis-net/pdfkb-mcp
          org.opencontainers.image.licenses=MIT
          org.opencontainers.image.authors=Juan Villa <juanqui@villafam.com>

    - name: Build and push Docker image (nightly)
      id: build
      uses: docker/build-push-action@v5
      with:
        context: .
        platforms: linux/amd64
        push: true
        tags: ${{ steps.meta.outputs.tags }}
        labels: ${{ steps.meta.outputs.labels }}
        build-args: |
          PDFKB_VERSION=${{ github.ref_name }}
          BUILD_DATE=${{ steps.meta.outputs.created }}
          VCS_REF=${{ github.sha }}
          PDF_PARSER=all
          SKIP_PARSER_VENVS=false
        # Use GitHub Actions cache export/import for buildkit to reduce repeated downloads
        cache-from: type=gha
        cache-to: type=gha,mode=max

    - name: Pull published image for verification
      if: always()
      run: |
        set -euo pipefail
        IMAGE=${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}:latest
        echo "Pulling image $IMAGE for verification"
          docker pull "$IMAGE" || true

    - name: Run parser verification container
      if: always()
      run: |
        set -euo pipefail
        IMAGE=${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}:latest
        CONTAINER_NAME=pdfkb-nightly-smoke
        docker run -d --name ${CONTAINER_NAME} --rm "$IMAGE" sleep infinity
        # Give the container a few seconds to initialize
        sleep 8

    - name: Run parser import smoke script
      if: always()
      run: |
        set -euo pipefail
        ./scripts/ci-parser-check.sh pdfkb-nightly-smoke

    - name: Stop smoke container (cleanup)
      if: always()
      run: |
        docker stop pdfkb-nightly-smoke || true

    - name: "Post: cleanup"
      if: always()
      run: echo "Nightly image build finished."
